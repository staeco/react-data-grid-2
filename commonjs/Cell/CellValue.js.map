{"version":3,"file":"CellValue.js","sourceRoot":"","sources":["../../src/Cell/CellValue.tsx"],"names":[],"mappings":";;;AAAA,wDAA0B;AAC1B,qCAAyD;AAGzD,4CAAoD;AAWpD,SAAwB,SAAS,CAAC,EAA+D;QAA7D,MAAM,YAAA,EAAE,OAAO,aAAA,EAAE,MAAM,YAAA,EAAE,KAAK,WAAA,EAAE,WAAW,iBAAA;IAC7E,SAAS,wBAAwB,CAAC,GAAY;QAC5C,qFAAqF;QAC7E,IAAA,cAAc,GAAK,MAAM,eAAX,CAAY;QAClC,IAAI,cAAc,EAAE;YAClB,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,EAAE;gBAC1C,OAAO,CAAC,IAAI,CAAC,4IAA4I,CAAC,CAAC;aAC5J;YACD,OAAO,cAAc,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;SACpC;IACH,CAAC;IAED,SAAS,iBAAiB;QACxB,IAAM,GAAG,GAAG,OAAO,OAAO,CAAC,MAAM,KAAK,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;QAE9E,OAAO;YACL,KAAK,OAAA;YACL,MAAM,QAAA;YACN,MAAM,QAAA;YACN,WAAW,aAAA;YACX,GAAG,KAAA;YACH,eAAe,EAAE,wBAAwB,CAAC,GAAG,CAAC;SAC/C,CAAC;IACJ,CAAC;IAED,IAAM,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;IAEnC,IAAI,oBAAS,CAAC,SAAS,CAAC,EAAE;QACxB,OAAO,eAAK,CAAC,YAAY,CAAC,SAAS,EAAE,iBAAiB,EAAE,CAAC,CAAC;KAC3D;IAED,IAAI,6BAAkB,CAAC,SAAS,CAAC,EAAE;QACjC,OAAO,8BAAC,SAAS,uBAAK,iBAAiB,EAAE,EAAI,CAAC;KAC/C;IAED,OAAO,8BAAC,gCAAmB,IAAC,KAAK,EAAE,KAAe,GAAI,CAAC;AACzD,CAAC;AApCD,4BAoCC","sourcesContent":["import React from 'react';\nimport { isElement, isValidElementType } from 'react-is';\n\nimport { FormatterProps, RowData } from '../common/types';\nimport { SimpleCellFormatter } from '../formatters';\nimport { CellContentProps } from './CellContent';\n\ntype CellValueProps = Pick<CellContentProps,\n'rowIdx'\n| 'rowData'\n| 'column'\n| 'value'\n| 'isScrolling'\n>;\n\nexport default function CellValue({ rowIdx, rowData, column, value, isScrolling }: CellValueProps) {\n  function getFormatterDependencies(row: RowData) {\n    // convention based method to get corresponding Id or Name of any Name or Id property\n    const { getRowMetaData } = column;\n    if (getRowMetaData) {\n      if (process.env.NODE_ENV === 'development') {\n        console.warn('getRowMetaData for formatters is deprecated and will be removed in a future version of ReactDataGrid. Instead access row prop of formatter');\n      }\n      return getRowMetaData(row, column);\n    }\n  }\n\n  function getFormatterProps(): FormatterProps<unknown> {\n    const row = typeof rowData.toJSON === 'function' ? rowData.toJSON() : rowData;\n\n    return {\n      value,\n      column,\n      rowIdx,\n      isScrolling,\n      row,\n      dependentValues: getFormatterDependencies(row)\n    };\n  }\n\n  const Formatter = column.formatter;\n\n  if (isElement(Formatter)) {\n    return React.cloneElement(Formatter, getFormatterProps());\n  }\n\n  if (isValidElementType(Formatter)) {\n    return <Formatter {...getFormatterProps()} />;\n  }\n\n  return <SimpleCellFormatter value={value as string} />;\n}\n"]}